
1.	零售商品表分表处理  
		针对稳定版本系统进行维护, 解决商品查询问题 ,
		solr<商品关联维度>/分库/冷热数据分表 用entityId做路由
2.	新零售1.0开发
		1 商品初始化问题 dubbo 引起的异步的问题  改进 --> 改用消息的形式处理
		2 激活码  开店 
		3 商品分页问题的处理, 列表索引 , 单个缓存, 与餐饮共用一个商品中心, 
		4 solr索引的修改  hive sql 修改 添加了字段 也添加了索引
		5 批量操作问题 / 对商品下发的处理
	改进:
		在商品表中增加一个code规则来表示商品 如 1000000 表示连锁商品 100000000000 表示连锁下发的商品 500000000000 表示门店自己的商品 这样在判断商品是否是连锁商品的时候就不用去查询了
		-> 具体实施的话就分几步走  1, 先加上字段 
							  	2, 对商品插入的地方进行修改 
							  	3, 对每个店的商品数据进行手动生成 
							  	4, 然后在来改造之前判断逻辑
		商品排序的时候可以按照code来排序和用create_time 排序的意义是一样的
	    然后在下发的时候采用分段式下发


	    	2, 服务端生成任务存表存多条记录
3.	零售通对接开发与维护 < 零售通与二维火的绑定关系在零售这边 > < 零售通与二维火商品映射关系存在零售通 >
	全量:
		商品同步,  
			拉商品 -> 从零售通拉取商品到零售库 -> 返回映射关系给零售通(关联关系存储在零售通那边) / 同时发送拉去下一页的消息
										   	// 插入商品  
										   		[ catagory ] /分类
										   		[ goodsUnit ] /商品单位
										   		[ price ] /进货价/零售价 
										   		[ stockinfo ] /加权平均价 
										   	 	[ microgoods ] /微店商品
										   	 	[ microPrice ] /微店价格
										   	 	[ purchase_avg_change_log ] /采购平均价 {stockinfo.powerPrice}
										   	 	[ cost_price_change_log ] /成本价价 {stockinfo.powerPrice}
										   	// 修改商品
										   		[ catagory ] /分类 insert
										   		[ goodsUnit ] /商品单位 insert
										   		[ price ] /进货价/零售价 update
										   		[ stockinfo ] /加权平均价 update
										   	 	[ microgoods ] /微店商品 update
										   	 	[ microPrice ] /微店价格 update
										   	 	[ purchase_avg_change_log ] /采购平均价 {stockinfo.powerPrice} update  采购平均价记录
										   	 	[ cost_price_change_log ] /成本价价 {stockinfo.powerPrice} update  变更记录
										    --->/过滤掉无效的商品 ("DELETE" , barcode.contains("#") , 全量)
										   	 	/处理一码多品的问题	( 更新最后一条, <映射关系返回最后一条id> )
										   	 	/增量更新商品 必然会传 isvGoodsId 
										   	 	/ < 问题:> 计次服务的问题(有计次服务的商品还没有使用完的商品 不能删除 -> 直接抛出错误)
										   	 	/ 
			推商品 -> 从零售商品推到零售通
		库存
		 	推库存 -> 把零售库存推到零售通  (非0库存推送到零售通, 分页推送的)
		 	拉库存 -> 从零售通拉取库存到零售 (按照商品id去零售通拉取库存 , 按照商品id分页拉取)
	增量:
		商品同步 
		库存同步
		订单同步

	订单同步,
	------------------------------------------------------------------
	改进: 
		2大类	多线程处理 / 单线程处理  借助mq的数据堆积能力 <处理好幂等, 消息发送失败, 消息丢失问题>
		3种情况  		零售通 			二维火
				第一种  	有 				有 		--> 此种情况下  判断我们的商品的个数 如果不多的话放在缓存(100个以内) / 控制并发数量	
				第二种  	无 				有		相当于单向同步  借助多线程 以及mq的消息堆积能力 加快处理速度 
				第三种  	有 				无		相当于单向同步  借助多线程 以及mq的消息堆积能力 加快处理速度
		同步过程中的异常处理 [一但用户取消 / 重试3次之后 还出现大批量商品]
			采用异常处理策略
				1 出现异常 不再同步 等待用户手动处理 [ 1, 从失败的消息进行处理  2, 重新开始同步 3, 取消同步 4, 发送同步信息给客服/相应技术人员 ]
				2 出现异常 不再同步 以消息通知 ( 自动选择处理 )
				3 出现异常 记录失败的消息, 以及拉取消息的页码  跳过当前错误继续执行 
					执行同步完成之后  以邮件方式通知用户具体消息 且 消息推送方式通知同步结果
					提供再次同步选择 [1 同步失败的商品] [2 重新开始同步] [3 取消] [4 发送同步信息给公司给技术支持/相应技术人员]
					用户自己同步3次之后还有失败的商品返回给前端提示 [ 商品信息可能有误 如无误请联系售后支持 然后反应到开发 ]
		增量同步:
			1 二维火 -> 零售通 每次同步给零售通的消息进行一个 success/fail 的回调,在retail-server 这边进行处理fail 了打印日志, // 消息通知
			2 零售通 -> 二维火 一但同步消息处理失败, 记录日志, 并给用户提示 // 消息通知
			3 如果是批量操作的形式, 则统一记录一次 操作ID/事务ID的形式 返回给用户汇总的提示 // 消息通知

4.	餐饮审核中心开发与维护
		数据存放 店铺信息 , 法人信息 , 资质信息 存放在 shop 那边
		[ 将信息发送到支付中心 -> 发送到工行 / 网商银行进行进件 
		 	-> 然后返回进件结果, 失败继续申请 
		 	-> 成功, 则等待工行, 网商 回调
		 	-> 是否需要补充资料 / 是否需要打款进行验证
		 	-> 成功之后 , 更改商家收款账户的信息 / 之前的账号不再使用 ]
		添加了几个新的业务, 如店家资料审核的信息 
		绿洲计划

		数据申请 申请条件 满30天 修改策略



5.	零售服务端物流模块SQL优化
		主要涉及 物流出入库 库存调整 (连锁功能 采购单 调拨单)[则又门店发起申请,向上级采购, 上级审批之后 门店再确认收货]
		问题:	1 sql 写得太复杂, 
				2 关联的主次表不合理
				3 条件查询 查出来的太多 [ 模糊查询 智能查询前100条 ]
		改进:
			将带有模糊多条件查询的业务走搜索引擎
			将带有union 关联查询的业务在solr建立一张宽表走搜索引擎
6.	餐饮商品中心维护
		初始化商品 
			用户用激活码激活了开店, 然后会调用商品的接口生成默认商品数据
		国际化二期
			菜单名称 单位2个(点菜单位, 结账单位) 规格 做法  做替换
			索引那边升级改造 生成n个国际化的值所对应的索引 (修改hive(全量) 以及 canel 订阅binlog 日志转成rq消息发送到 增量引擎进行增量的修改)
		改进:
			1, 初始化商品采用lazy模式生成 / 或者采用 商户soa创建好店铺后发一条生成默认商品的mq消息 ,商品这边收到消息之后再创建默认商品
			2, 国际化处理的问题

7.	零售报表服务化的开发与维护
		1 交接班记录 ( [ 应收/实收金额 ] 由店家通过收银机上次到api -> 报表中心)
		2 用户角色提成 ( 计算数据的来源是订单操作记录表 [ 关键信息是, 用户角色 ,订单类型, 订单金额, 提成比率, 提成金额 ] 
				按照订单生成时 当前店家自己设置提成比例 	
				/** 按商品比例提成 */ < 按商品里面设置的提成比例进行提成  会跟着订单走 >
				/** 按单提成 */   < 按单数的提成 >
				/** 按营业额提成 */ < 按营业额提成 >
				/** 按商品提成 */	 < 按商品提成是批量设置的形式 当选择所有商品进行提成的时候 客户端会提交所有商品id给后端 量大, 保存之后查询也是全部返回给客户端的 >
			)
			退货单会按照之前销售的单子生成对应的退货的角色提成
			user_royalty_temp 表相当于一个队列表 2个月前数据做清理 回算在2个月内
		3 库存变更记录
			报表主要做存储  /** 由于之前调dubbo服务产生的问题 导致会丢掉一部分的库存变更记录, 然后变更记录做了调整了插入形式, **/
			生成库存变更记录发送到mq 然后报表这边接收消息处理入库
		4 库存结存
			以每个月的月初作为期初 然后每天的库存库存变更记录作为增量 +/- 以此内推
	 	5 数据清理 ( 账单数据 ) 
	 		对营业数据进行清理 < 主要是订单相关的数据 >
		6 首页实时数据的处理 [ 订单上传 -> 插入订单 -> 发送用于生成营业额的消息 -> 做成营业额数据 -> 报表soa负责处理营业额数据并入库 ]
		7 报表:
			1 收款报表  	[ 员工 收款金额 支付方式 是否计入销售额 员工角色	]
			2 商品销售 		[ 订单类型 商品 净销量 净销售额	折前金额 销售成本 销售毛利 退货数量 退货金额	]
			3 销售收益 		[ 订单类型 商品 +不计入销售额 ]
			4 商品采购报表 	[ 供应商 [ 单据 单据类型 单据操作时间 ] 供应商数量 供应商电话 [进货量 进货金额] [退货量 退货金额] ]
			5 业绩报表		[ 员工 角色 销售数量 退货数量 净销量 净销售额]
	优化: 
		/** 按商品提成 */	 将这个页面改成分页形式/条件查询模式, 同时将批量接口进行改造, 限定选中批量大小
		查询的方式 
			-> 分冷热数据分离 三个月内的数据 用户查询走搜索引擎
			-> 其他数据走冷库 
			-> 
8. 	零售库存扣减的改造 
		-> 订单中心发减库存的消息到retail-server 
		-> 按商品类型 转成相应的库存
			-> 普通商品
			-> 拆分商品 < 换成小件商品 >        | 如果小件不存在 则直接转成大件的库存			
			-> 组装商品	< 换成小件商品 >		| 如果小件不存在 则直接转成大件的库存	
			-> 散称商品	< 退货不能直接加上库存 >| 如果小件不存在 则直接转成大件的库存	
			 |_根据大件商品减去原料商品 >> 退货的时候不能直接退回原料商品 在另外一张表里面缓存起来	
			-> 判断是否盘点
				---------------------------------------------------------|服鞋/商超
				是	-> 则转成相应的库存纠正记录							 |	服鞋: 减商品库存同时减款式库存	
						-> 1, 等待用户结束盘点							 |	商超: 减商品库存
						-> 2, 轮询库存纠正记录							 |				
							-> 减掉相应的库存 -> 生成库存变更记录发送到mq|
				---------------------------------------------------------|
				否	-> 直接减掉库存 								  	 |		
						-> 生成相应的库存变更记录					 	 |
				---------------------------------------------------------|
		优化: 
			->
8.	零售订单中心维护
	微店销售商品进行分单的一个操作
		//从能处理订单的列表中找到相应的门店	
		//判断虚拟库存 
		//扣减虚拟库存
		就近分单
		整单分单 按照距离远近的分单 
		手动分单
	优化:
		1,轮询零售商户补全店铺的经纬度的信息
		2,将用高德查询距离的方式改成走redis / 自己计算  
9.	参与过智能客服技术验证开发
	项目背景 : 线上很多的基础问题,业务上的问题由于用户不知道 频繁发生 
		收集当前客服和用户聊天记录
		然后做了筛选  搭了一个django的server 

10. 微店
	

报表问题 
   1, 报表统计维度问题 (如 T+1 , 按天 , 按小时, 实时) 实现难度逐级上升
   2, 报表数据量 (如 商品销售 订单) 订单目前3个月线上数据 其他迁移 随用户增加而增加 主要难度在于对报表数据库维护
   3, 报表查询 (业务上要按照 门店 , 机构, 关联性[内嵌关联 注:涉及多个数据的一致性问题,对事务,实时性,可用性都是挑战] )
   3, 报表关联 (关联性[内嵌关联 注:涉及多个数据的一致性问题,对事务,实时性,可用性都是挑战]) 没张报表的来源都要能追溯到源头
   4, 报表查询量 rt值 用户并发量  并发查询量 涉及到底层缓存使用等等
   5, 报表设计  在用户需求和系统稳定性之前做平衡  理解用户的真正需求 
   6, 报表数据过滤 分离出有效的数据,用户业务指标所蕴含实际影响数据