spring aop 分析
	分析入口:
	org.springframework.aop.config.AopNamespaceHandler
	refresh -ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); //在实例化的时候去执行加载handlers 然后执行resolve 方法
	org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver#resolve
	-->  Class<?> handlerClass = ClassUtils.forName(className, this.classLoader); //加载 org.springframework.context.config.ContextNamespaceHandler

	只分析aop
	-->AopNamespaceHandler
		--> config 
		--> aspectj-autoproxy 
		--> scoped-proxy  
		--> spring-configured 

	Advisor 的设计

	https://www.cnblogs.com/zhaozihan/p/5953063.html

    重要方法分析
    引入了 aopalliance 基础interface
    	<重要类>        MethodInterceptor  Advice
    	<重要方法>      org.aopalliance.intercept.MethodInterceptor#invoke

    Advice 的子类和 一些接口 <aopalliance包> <aspectj>
    		Interceptor 										(org.aopalliance.intercept)
				MethodInterceptor 								(org.aopalliance.intercept)
				ConstructorInterceptor 							(org.aopalliance.intercept)
			BeforeAdvice 										(org.springframework.aop)
				MethodBeforeAdvice 								(org.springframework.aop)
			DynamicIntroductionAdvice 							(org.springframework.aop)
				IntroductionInterceptor 						(org.springframework.aop)
			AbstractAspectJAdvice 								(org.springframework.aop.aspectj)
				AspectJAfterAdvice 								(org.springframework.aop.aspectj)
				AspectJAfterReturningAdvice 					(org.springframework.aop.aspectj)
				AspectJAroundAdvice 							(org.springframework.aop.aspectj)
				AspectJAfterThrowingAdvice 						(org.springframework.aop.aspectj)
				AspectJMethodBeforeAdvice 						(org.springframework.aop.aspectj)
			AfterAdvice 										(org.springframework.aop)
				AfterReturningAdviceInterceptor 				(org.springframework.aop.framework.adapter)
				ThrowsAdvice 									(org.springframework.aop)
				AspectJAfterAdvice 								(org.springframework.aop.aspectj)
				AspectJAfterReturningAdvice 					(org.springframework.aop.aspectj)
				AspectJAfterThrowingAdvice 						(org.springframework.aop.aspectj)
				ThrowsAdviceInterceptor 						(org.springframework.aop.framework.adapter)
				AfterReturningAdvice 							(org.springframework.aop)			
    
    pointcut 
    	ControlFlowPointcut 																    (org.springframework.aop.support)
		ComposablePointcut 																		(org.springframework.aop.support)
		DynamicMethodMatcherPointcut 															(org.springframework.aop.support)
			PerTargetInstantiationModelPointcut in InstantiationModelAwarePointcutAdvisorImpl 	(org.springframework.aop.aspectj.annotation)
		ExpressionPointcut 																		(org.springframework.aop.support)
			AbstractExpressionPointcut 															(org.springframework.aop.support)
		AspectJExpressionPointcut 																(org.springframework.aop.aspectj)
		TruePointcut 																			(org.springframework.aop)
		AnnotationMatchingPointcut 																(org.springframework.aop.support.annotation)
		StaticMethodMatcherPointcut 															(org.springframework.aop.support)
			StaticMethodMatcherPointcutAdvisor 													(org.springframework.aop.support)
			TransactionAttributeSourcePointcut 													(org.springframework.transaction.interceptor)
			SetterPointcut in Pointcuts 														(org.springframework.aop.support)
			JCacheOperationSourcePointcut 														(org.springframework.cache.jcache.interceptor)
			CacheOperationSourcePointcut 														(org.springframework.cache.interceptor)
			GetterPointcut in Pointcuts 														(org.springframework.aop.support)
			AbstractRegexpMethodPointcut 														(org.springframework.aop.support)
			NameMatchMethodPointcut 															(org.springframework.aop.support)


	<AOP中的切面封装了增强（Advice）和切点（Pointcut）>
 

	----------------------------------------------------------------------------------
	spring aop 关键代码
	----------------------------------------------------------------------------------

    @Override
	public Object getProxy(ClassLoader classLoader) {
		if (logger.isDebugEnabled()) {
			logger.debug("Creating CGLIB proxy: target source is " + this.advised.getTargetSource());
		}

		try {
			Class<?> rootClass = this.advised.getTargetClass();
			Assert.state(rootClass != null, "Target class must be available for creating a CGLIB proxy");

			Class<?> proxySuperClass = rootClass;
			if (ClassUtils.isCglibProxyClass(rootClass)) {
				proxySuperClass = rootClass.getSuperclass();
				Class<?>[] additionalInterfaces = rootClass.getInterfaces();
				for (Class<?> additionalInterface : additionalInterfaces) {
					this.advised.addInterface(additionalInterface);
				}
			}

			// Validate the class, writing log messages as necessary.
			validateClassIfNecessary(proxySuperClass, classLoader);

			// Configure CGLIB Enhancer...
			Enhancer enhancer = createEnhancer();
			if (classLoader != null) {
				enhancer.setClassLoader(classLoader);
				if (classLoader instanceof SmartClassLoader &&
						((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) {
					enhancer.setUseCache(false);
				}
			}
			enhancer.setSuperclass(proxySuperClass);
			enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));
			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);
			enhancer.setStrategy(new ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));

			Callback[] callbacks = getCallbacks(rootClass);
			Class<?>[] types = new Class<?>[callbacks.length];
			for (int x = 0; x < types.length; x++) {
				types[x] = callbacks[x].getClass();
			}
			// fixedInterceptorMap only populated at this point, after getCallbacks call above
			enhancer.setCallbackFilter(new ProxyCallbackFilter(
					this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));
			enhancer.setCallbackTypes(types);

			// Generate the proxy class and create a proxy instance.
			return createProxyClassAndInstance(enhancer, callbacks);
		}
		catch (CodeGenerationException ex) {
			throw new AopConfigException("Could not generate CGLIB subclass of class [" +
					this.advised.getTargetClass() + "]: " +
					"Common causes of this problem include using a final class or a non-visible class",
					ex);
		}
		catch (IllegalArgumentException ex) {
			throw new AopConfigException("Could not generate CGLIB subclass of class [" +
					this.advised.getTargetClass() + "]: " +
					"Common causes of this problem include using a final class or a non-visible class",
					ex);
		}
		catch (Throwable ex) {
			// TargetSource.getTarget() failed
			throw new AopConfigException("Unexpected AOP exception", ex);
		}
	}
	----------------------------------------------------------------------------------
 
