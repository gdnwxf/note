zookeeper 分析

zk 配置
	# The number of milliseconds of each tick
	tickTime=2000
	# The number of ticks that the initial 
	# synchronization phase can take
	initLimit=10
	# The number of ticks that can pass between 
	# sending a request and getting an acknowledgement
	syncLimit=5
	# the directory where the snapshot is stored.
	# do not use /tmp for storage, /tmp here is just 
	# example sakes.
	dataDir=/opt/data/zookeeper
	# the port at which the clients will connect
	clientPort=2181
	# the maximum number of client connections.
	# increase this if you need to handle more clients
	maxClientCnxns=0


	#server.4=10.1.21.109:2887:3887
	#server.5=10.1.21.110:2887:3887
	#server.6=10.1.21.111:2887:3887
	server.7=10.1.21.200:2887:3887  
	server.8=10.1.21.201:2887:3887
	server.9=10.1.21.202:2887:3887
	#
	# Be sure to read the maintenance section of the 
	# administrator guide before turning on autopurge.
	#
	# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
	#
	# The number of snapshots to retain in dataDir
	#autopurge.snapRetainCount=3
	# Purge task interval in hours
	# Set to "0" to disable auto purge feature
	#autopurge.purgeInterval=1

zk lock的使用
http://blog.csdn.net/zmx729618/article/details/62417330
zk lock 分析
http://blog.csdn.net/sunfeizhi/article/details/51926396

lock的算法细节 :
	客户端A要获取分布式锁的时候首先到locker下创建一个临时顺序节点（node_n），然后立即获取locker下的所有（一级）子节点。
	此时因为会有多个客户端同一时间争取锁，因此locker下的子节点数量就会大于1。对于顺序节点，特点是节点名称后面自动有一个数字编号，
	先创建的节点数字编号小于后创建的，因此可以将子节点按照节点名称后缀的数字顺序从小到大排序，这样排在第一位的就是最先创建的顺序节点，
	此时它就代表了最先争取到锁的客户端！此时判断最小的这个节点是否为客户端A之前创建出来的node_n，如果是则表示客户端A获取到了锁，
	如果不是则表示锁已经被其它客户端获取，因此客户端A要等待它释放锁，也就是等待获取到锁的那个客户端B把自己创建的那个节点删除。
	此时就通过监听比node_n次小的那个顺序节点的删除事件来知道客户端B是否已经释放了锁，如果是，此时客户端A再次获取locker下的所有子节点，
	再次与自己创建的node_n节点对比，直到自己创建的node_n是locker的所有子节点中顺序号最小的，此时表示客户端A获取到了锁！


分布式协调/通知.
	心跳检测 		<临时节点= 不同的机器之间可以根据这个临时子节点来判断对应的客户端机器是否存活>
	工作进度汇报 	<同时各个机器可以将自己的任务执行进度写到该临时节点中去，以便中心系统能够实时获取任务的执行进度>
	系统调度 		<修改节点数据, 通知客户端订阅>

poxos + ZAB 协议
http://blog.csdn.net/u013679744/article/details/79240249
http://blog.csdn.net/weixin_39800144/article/details/79316544

### ZAB协议的两种基本模式：
	| 崩溃恢复模式 
	| 消息广播模式 > 过半的follower与leader服务器完成了状态同步

-1 集群角色 <Leader> <Follower> <Observer>
0 会话 <TCP长连接>  <SessionTimeout控制session会话>
1 DataTree是内存数据存储的核心
2 节点特性  <临时与会话绑定, 且不能创建子节点>
3 zooKeeper中每个znode的Stat结构体由下述字段构成：
    czxid：创建节点的事务的zxid
    mzxid：对znode最近修改的zxid
    ctime：以距离时间原点(epoch)的毫秒数表示的znode创建时间
    mtime：以距离时间原点(epoch)的毫秒数表示的znode最近修改时间
    version：znode数据的修改次数
    cversion：znode子节点修改次数 <cas> <version = -1 表示不需要检查版本>
    aversion：znode的ACL修改次数
    ephemeralOwner：如果znode是临时节点，则指示节点所有者的会话ID；如果不是临时节点，则为零。
    dataLength：znode数据长度。
    numChildren：znode子节点个数。
4 Watcher机制  <发布,订阅>
	| 1.一次性触发  数据发生改变时，一个watcher event会被发送到client，但是client只会收到一次这样的信息。
    | 2.watcher event异步发送, 由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于Zookeeper本身提供了ordering guarantee，即客户端监听事件后，才会感知它所监视znode发生了变化。< 先发事件通知,再感知数据>  
    | 3.Zookeeper有数据监视和子数据监视   getdata() and exists() 设置数据监视，getchildren()设置了子节点监视
    |-http://blog.csdn.net/u013679744/article/details/79230418 
5 ACL--保障数据的安全 <分为三个维度：scheme、id、permission> [schema代表授权策略，id代表用户，permission代表权限.]
	| schema <digest digest:username:BASE64(SHA1(password)):cdrwa >
	| schema <ip:192.168.1.100:rw >
	| schema <world:anyone:cdrwa >
	| schema <host>
	| schema <super>
	| schema <Auth>
	permission 
		| CREATE(r)：创建子节点的权限
		| DELETE(d)：删除节点的权限
		| READ(r)：读取节点数据的权限
		| WRITE(w)：修改节点数据的权限
		| ADMIN(a)：设置子节点权限的权限
6 Zookeeper内存模型
    > DataTree是整个树的核心，不与任何网络、客户端以及请求事务有关。
    > DataTree利用CurrentHashMap<String,DataNode>的属性nodes来存储着整个树的所有节点以及对应的路径，
    > 对于临时节点单独放在一个CurrentHashMap中。
    > DataNode是最小的存储单元，保存着节点的数据，ACL，父节点和子节点列表。
	| DataTree
	| DataNode
	| ZKDatabase 
		> Zookeeper的内存数据库，
		> 管理Zookeeper的所有会话、
		> DataTree存储和事务日志。
		> ZKDatabase会定时向磁盘dump快照数据，
		> 同时在Zookeeper启动时，会通过磁盘的事务日志和快照文件恢复成一个完整的内存数据库
7 Zookeeper数据与存储
	$$ 采用快照+事务日志来进行数据持久化,来实现底层数据的一致性。
	事务日志：
	数据快照：<这两个文件都存在在 ${dataDir}/version-2/文件夹下面 >
	过半随机策略：<理论上进行snapCount次事务操作就会开始数据快照> <需要避免Zookeeper集群中所有机器在同一时刻进行数据快照。因此zk采用“过半随机”的策略>
	进行快照：<通过一个线程异步去写> <从内存中获取zookeeper的全量数据和校验信息，并序列化写入到本地磁盘文件中，以本次写入的第一个事务ZXID作为后缀>
	数据恢复：[<=100个最新的数据快照文件] <当基于快照文件构建了一个完整的DataTree实例和sessionWithTimeouts集合了，此时根据这个快照文件的文件名就可以解析出最新的ZXID，该ZXID代表了zookeeper开始进行数据快照的时刻，然后利用此ZXID定位到具体事务文件从哪一个开始，然后执行事务日志对应的事务，恢复到最新的状态，并得到最新的ZXID> [当所有快照文件都解析过了还是无法恢复一个完整dataTree 和 sessionWithTimeouts 就启动失败]