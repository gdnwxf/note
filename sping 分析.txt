sping 分析
	
getBean(String Name)
-> doGetBean(Name,null,null,false)
	-> transformedBeanName(name) // 如name="&aa" 转成 name="aa"
	-> getSingleton(beanName) //从缓存中获取数据 返回的是
		|---------------------------------------------------------------------------------------------------------
		|	/**
		|	 * Return the (raw) singleton object registered under the given name.
		|	 * <p>Checks already instantiated singletons and also allows for an early
		|	 * reference to a currently created singleton (resolving a circular reference).
		|	 * @param beanName the name of the bean to look for
		|	 * @param allowEarlyReference whether early references should be created or not
		|	 * @return the registered singleton object, or {@code null} if none found
		|	 */
		|	protected Object getSingleton(String beanName, boolean allowEarlyReference) {
		|		Object singletonObject = this.singletonObjects.get(beanName); //从singletonObjects缓存中取
		|		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
		|			synchronized (this.singletonObjects) {
		|				singletonObject = this.earlySingletonObjects.get(beanName); //取不到从earlySingletonObjects中取 此对象是一
		|				if (singletonObject == null && allowEarlyReference) {
		|					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName); // 从DefaultSingletonBeanRegistry 的 singletonFactories 中获取 ObjectFactory
		|					if (singletonFactory != null) {
		|						singletonObject = singletonFactory.getObject(); //通过FactoryBean 的 getObject() 获取
		|						this.earlySingletonObjects.put(beanName, singletonObject); // 放入earlySingletonObjects
		|						this.singletonFactories.remove(beanName); // 确保单例
		|					}
		|				}
		|			}
		|		}
		|		return (singletonObject != NULL_OBJECT ? singletonObject : null);
		|	}
		---------------------------------------------------------------------------------------------------------
	->getObjectForBeanInstance  <if (sharedInstance != null && args == null>
			|---------------------------------------------------------------------------------------------------------
			|protected Object getObjectForBeanInstance(
			|	Object beanInstance, String name, String beanName, RootBeanDefinition mbd) {
			|
			|	// Don't let calling code try to dereference the factory if the bean isn't a factory.
			|	if (BeanFactoryUtils.isFactoryDereference(name) && !(beanInstance instanceof FactoryBean)) {
			|		throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());
			|	}
			|
			|	// Now we have the bean instance, which may be a normal bean or a FactoryBean.
			|	// If it's a FactoryBean, we use it to create a bean instance, unless the
			|	// caller actually wants a reference to the factory.
			|	if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) {
			|		return beanInstance;
			|	}
			|	
			|	Object object = null;
			|	if (mbd == null) {
			|		object = getCachedObjectForFactoryBean(beanName); //从缓存中读取数据
			|	}
			|	if (object == null) {
			|		// Return bean instance from factory.
			|		FactoryBean<?> factory = (FactoryBean<?>) beanInstance;
			|		// Caches object obtained from FactoryBean if it is a singleton.
			|		if (mbd == null && containsBeanDefinition(beanName)) {
			|			mbd = getMergedLocalBeanDefinition(beanName);
			|		}
			|		boolean synthetic = (mbd != null && mbd.isSynthetic());
			|		object = getObjectFromFactoryBean(factory, beanName, !synthetic);
			|	}
			|	return object;
			|}
		---------------------------------------------------------------------------------------------------------

		------------------------------------------------------------------------------------------------------------------------------------------------
		----else
		|
		|{	
		|	// Fail if we're already creating this bean instance:
		|	// We're assumably within a circular reference.
		|	if (isPrototypeCurrentlyInCreation(beanName)) {
		|		throw new BeanCurrentlyInCreationException(beanName);
		|	}
		|
		|	// Check if bean definition exists in this factory.
		|	BeanFactory parentBeanFactory = getParentBeanFactory(); // 获取parentBeanFactory
		|	if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {
		|		// Not found -> check parent. // 找不到 -> 则通过parentBeanFactory来获取
		|		String nameToLookup = originalBeanName(name);
		|		if (args != null) {  
		|			// Delegation to parent with explicit args.
		|			return (T) parentBeanFactory.getBean(nameToLookup, args);
		|		}
		|		else {
		|			// No args -> delegate to standard getBean method.
		|			return parentBeanFactory.getBean(nameToLookup, requiredType);
		|		}
		|	}
		|
		|	if (!typeCheckOnly) {
		|		markBeanAsCreated(beanName);
		|	}
		|
		|	try {
		|		//从合并后的beandefinitionmap 获取 <主要针对的是properties文件 JAVA -D的参数等 List bean的形式等等>
		|		final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
		|		checkMergedBeanDefinition(mbd, beanName, args);
		|		
		|		// Guarantee initialization of beans that the current bean depends on.
		|		// 处理依赖资源的实例化
		|		String[] dependsOn = mbd.getDependsOn();
		|		if (dependsOn != null) {
		|			for (String dependsOnBean : dependsOn) {
		|				getBean(dependsOnBean);
		|				registerDependentBean(dependsOnBean, beanName);//放入依赖的bean的映射 建立依赖的bean和被依赖的bean的关系
		|			}
		|		}
		|
		|		// Create bean instance.
		|		if (mbd.isSingleton()) {
		|			sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {
		|				public Object getObject() throws BeansException {
		|					try {
		|						// AbstractAutowireCapableBeanFactory#createBean(String, RootBeanDefinition, java.lang.Object[])
		|						return createBean(beanName, mbd, args); //@ createBean
		|					}
		|					catch (BeansException ex) {
		|						// Explicitly remove instance from singleton cache: It might have been put there
		|						// eagerly by the creation process, to allow for circular reference resolution.
		|						// Also remove any beans that received a temporary reference to the bean.
		|						destroySingleton(beanName);
		|						throw ex;
		|					}
		|				}
		|			});
		|			bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
		|		}
		|
		|		else if (mbd.isPrototype()) {
		|			// It's a prototype -> create a new instance.
		|			Object prototypeInstance = null;
		|			try {
		|				beforePrototypeCreation(beanName);
		|				prototypeInstance = createBean(beanName, mbd, args);
		|			}
		|			finally {
		|				afterPrototypeCreation(beanName);
		|			}
		|			bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
		|		}
		|
		|		else {
		|			String scopeName = mbd.getScope();
		|			final Scope scope = this.scopes.get(scopeName);
		|			if (scope == null) {
		|				throw new IllegalStateException("No Scope registered for scope '" + scopeName + "'");
		|			}
		|			try {
		|				Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() {
		|					public Object getObject() throws BeansException {
		|						beforePrototypeCreation(beanName);
		|						try {
		|							return createBean(beanName, mbd, args);
		|						}
		|						finally {
		|							afterPrototypeCreation(beanName);
		|						}
		|					}
		|				});
		|				bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
		|			}
		|			catch (IllegalStateException ex) {
		|				throw new BeanCreationException(beanName,
		|						"Scope '" + scopeName + "' is not active for the current thread; " +
		|						"consider defining a scoped proxy for this bean if you intend to refer to it from a singleton",
		|						ex);
		|			}
		|		}
		|	}
		|	catch (BeansException ex) {
		|		cleanupAfterBeanCreationFailure(beanName);
		|		throw ex;
		|	}
		|}
		------------------------------------------------------------------------------------------------------------------------------------------------
		createBean
		|------------------------------------------------------------------------------------------------------------------------------------------------
		|	@Override
		|	protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException {
		|		if (logger.isDebugEnabled()) {
		|			logger.debug("Creating instance of bean '" + beanName + "'");
		|		}
		|		// Make sure bean class is actually resolved at this point.
		|		resolveBeanClass(mbd, beanName); // 目的是加载class 具体代码 < return (clToUse != null ? clToUse.loadClass(name) : Class.forName(name)); > 
		|
		|		// Prepare method overrides.
		|		try {
		|			// Check that lookup methods exists 检查lookup的配置
		|			mbd.prepareMethodOverrides();
		|		}
		|		catch (BeanDefinitionValidationException ex) {
		|			throw new BeanDefinitionStoreException(mbd.getResourceDescription(),
		|					beanName, "Validation of method overrides failed", ex);
		|		}
		|
		|		try {
		|			// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.
		|			// 用 BeanPostProcessor 的 InstantiationAwareBeanPostProcessor 来处理
		|			// BeanPostProcessor 的 applyBeanPostProcessorsAfterInitialization 后置处理
		|			Object bean = resolveBeforeInstantiation(beanName, mbd);
		|			if (bean != null) {
		|				return bean;
		|			}
		|		}
		|		catch (Throwable ex) {
		|			throw new BeanCreationException(mbd.getResourceDescription(), beanName,
		|					"BeanPostProcessor before instantiation of bean failed", ex);
		|		}
		|
		|		Object beanInstance = doCreateBean(beanName, mbd, args); // BeanWrapper 的封装
		|		if (logger.isDebugEnabled()) {
		|			logger.debug("Finished creating instance of bean '" + beanName + "'");
		|		}
		|		return beanInstance;
		|	}
		------------------------------------------------------------------------------------------------------------------------------------------------
		doCreateBean
		|------------------------------------------------------------------------------------------------------------------------------------------------
		|/**
		| * Actually create the specified bean. Pre-creation processing has already happened
		| * at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks.
		| * <p>Differentiates between default bean instantiation, use of a
		| * factory method, and autowiring a constructor.
		| * @param beanName the name of the bean
		| * @param mbd the merged bean definition for the bean
		| * @param args arguments to use if creating a prototype using explicit arguments to a
		| * static factory method. This parameter must be {@code null} except in this case.
		| * @return a new instance of the bean
		| * @throws BeanCreationException if the bean could not be created
		| * @see #instantiateBean
		| * @see #instantiateUsingFactoryMethod
		| * @see #autowireConstructor
		| */
		|protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) {
		|	// Instantiate the bean.
		|	BeanWrapper instanceWrapper = null;
		|	if (mbd.isSingleton()) {
		|		instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
		|	}
		|	if (instanceWrapper == null) {
		|		instanceWrapper = createBeanInstance(beanName, mbd, args);
		|	}
		|	final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
		|	Class<?> beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);
		|
		|	// Allow post-processors to modify the merged bean definition.
		|	synchronized (mbd.postProcessingLock) {
		|		if (!mbd.postProcessed) {
		|			applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
		|			mbd.postProcessed = true;
		|		}
		|	}
		|
		|	// Eagerly cache singletons to be able to resolve circular references
		|	// even when triggered by lifecycle interfaces like BeanFactoryAware.
		|	boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&
		|			isSingletonCurrentlyInCreation(beanName));
		|	if (earlySingletonExposure) {
		|		if (logger.isDebugEnabled()) {
		|			logger.debug("Eagerly caching bean '" + beanName +
		|					"' to allow for resolving potential circular references");
		|		}
		|		addSingletonFactory(beanName, new ObjectFactory<Object>() {
		|			public Object getObject() throws BeansException {
		|				return getEarlyBeanReference(beanName, mbd, bean);
		|			}
		|		});
		|	}
		|
		|	// Initialize the bean instance.
		|	Object exposedObject = bean;
		|	try {
		|		populateBean(beanName, mbd, instanceWrapper); // 填充bean的属性的信息
		|		if (exposedObject != null) {
		|			exposedObject = initializeBean(beanName, exposedObject, mbd);// 实例化bean
		|		}
		|	}
		|	catch (Throwable ex) {
		|		if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {
		|			throw (BeanCreationException) ex;
		|		}
		|		else {
		|			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex);
		|		}
		|	}
		|
		|	if (earlySingletonExposure) {
		|		Object earlySingletonReference = getSingleton(beanName, false);
		|		if (earlySingletonReference != null) {
		|			if (exposedObject == bean) {
		|				exposedObject = earlySingletonReference;
		|			}
		|			else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {
		|				String[] dependentBeans = getDependentBeans(beanName);
		|				Set<String> actualDependentBeans = new LinkedHashSet<String>(dependentBeans.length);
		|				for (String dependentBean : dependentBeans) {
		|					if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
		|						actualDependentBeans.add(dependentBean);
		|					}
		|				}
		|				if (!actualDependentBeans.isEmpty()) {
		|					throw new BeanCurrentlyInCreationException(beanName,
		|							"Bean with name '" + beanName + "' has been injected into other beans [" +
		|							StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +
		|							"] in its raw version as part of a circular reference, but has eventually been " +
		|							"wrapped. This means that said other beans do not use the final version of the " +
		|							"bean. This is often the result of over-eager type matching - consider using " +
		|							"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.");
		|				}
		|			}
		|		}
		|	}
		|
		|	// Register bean as disposable.
		|	try {
		|		registerDisposableBeanIfNecessary(beanName, bean, mbd);
		|	}
		|	catch (BeanDefinitionValidationException ex) {
		|		throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);
		|	}
		|
		|	return exposedObject;
		|}
		|------------------------------------------------------------------------------------------------------------------------------------------------
		createBeanInstance
		|------------------------------------------------------------------------------------------------------------------------------------------------
		|
		|/**
		| * Create a new instance for the specified bean, using an appropriate instantiation strategy:
		| * factory method, constructor autowiring, or simple instantiation.
		| * @param beanName the name of the bean
		| * @param mbd the bean definition for the bean
		| * @param args arguments to use if creating a prototype using explicit arguments to a
		| * static factory method. It is invalid to use a non-null args value in any other case.
		| * @return BeanWrapper for the new instance
		| * @see #instantiateUsingFactoryMethod
		| * @see #autowireConstructor
		| * @see #instantiateBean
		| */
		|protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) {
		|	// Make sure bean class is actually resolved at this point.
		|	Class<?> beanClass = resolveBeanClass(mbd, beanName); // 加载class 
		|
		|	if (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {
		|		throw new BeanCreationException(mbd.getResourceDescription(), beanName,
		|				"Bean class isn't public, and non-public access not allowed: " + beanClass.getName());
		|	}
		|	//如果有factoryMethod 直接实例化并反射调用 FactoryMethod的方法
		|	if (mbd.getFactoryMethodName() != null)  {
				// ConstructorResolve.instantiateUsingFactoryMethod
		|		return instantiateUsingFactoryMethod(beanName, mbd, args);// <convertionSerivce, 注册的类型转换等,参数匹配等等 > 处理factory-method 
		|	}
		|
		|	// Shortcut when re-creating the same bean...
		|	boolean resolved = false;
		|	boolean autowireNecessary = false;
		|	if (args == null) {
		|		synchronized (mbd.constructorArgumentLock) {
		|			if (mbd.resolvedConstructorOrFactoryMethod != null) {
		|				resolved = true;
		|				autowireNecessary = mbd.constructorArgumentsResolved;
		|			}
		|		}
		|	}
		|	if (resolved) {
		|		if (autowireNecessary) {
		|			return autowireConstructor(beanName, mbd, null, null);
		|		}
		|		else {
		|			return instantiateBean(beanName, mbd);
		|		}
		|	}
		|
		|	// Need to determine the constructor...
		|	Constructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);
		|	if (ctors != null ||
		|			mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||
		|			mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  {
		|		return autowireConstructor(beanName, mbd, ctors, args);
		|	}
		|
		|	// No special handling: simply use no-arg constructor.
		|	return instantiateBean(beanName, mbd);
		|}
		|------------------------------------------------------------------------------------------------------------------------------------------------
		initializeBean
		|------------------------------------------------------------------------------------------------------------------------------------------------
		|	/**
		|	 * Initialize the given bean instance, applying factory callbacks
		|	 * as well as init methods and bean post processors.
		|	 * <p>Called from {@link #createBean} for traditionally defined beans,
		|	 * and from {@link #initializeBean} for existing bean instances.
		|	 * @param beanName the bean name in the factory (for debugging purposes)
		|	 * @param bean the new bean instance we may need to initialize
		|	 * @param mbd the bean definition that the bean was created with
		|	 * (can also be {@code null}, if given an existing bean instance)
		|	 * @return the initialized bean instance (potentially wrapped)
		|	 * @see BeanNameAware
		|	 * @see BeanClassLoaderAware
		|	 * @see BeanFactoryAware
		|	 * @see #applyBeanPostProcessorsBeforeInitialization
		|	 * @see #invokeInitMethods
		|	 * @see #applyBeanPostProcessorsAfterInitialization
		|	 */
		|	protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {
		|		if (System.getSecurityManager() != null) {
		|			AccessController.doPrivileged(new PrivilegedAction<Object>() {
		|				public Object run() {
		|					invokeAwareMethods(beanName, bean);
		|					return null;
		|				}
		|			}, getAccessControlContext());
		|		}
		|		else {
		|			invokeAwareMethods(beanName, bean); //各种ware的处理
		|		}
		|
		|		Object wrappedBean = bean;
		|		if (mbd == null || !mbd.isSynthetic()) {
					//BeanpostProcessor 处理 < 如代理等等的处理 >
		|			wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
		|		}
		|
		|		try {
		|			invokeInitMethods(beanName, wrappedBean, mbd);
		|		}
		|		catch (Throwable ex) {
		|			throw new BeanCreationException(
		|					(mbd != null ? mbd.getResourceDescription() : null),
		|					beanName, "Invocation of init method failed", ex);
		|		}
		|
		|		if (mbd == null || !mbd.isSynthetic()) {
		|			wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
		|		}
		|		return wrappedBean;
		|	}
		|------------------------------------------------------------------------------------------------------------------------------------------------
		| invokeAwareMethods 方法处理
		|------------------------------------------------------------------------------------------------------------------------------------------------
		|private void invokeAwareMethods(final String beanName, final Object bean) {
		|	if (bean instanceof Aware) {
		|		if (bean instanceof BeanNameAware) {
		|			((BeanNameAware) bean).setBeanName(beanName);
		|		}
		|		if (bean instanceof BeanClassLoaderAware) {
		|			((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());
		|		}
		|		if (bean instanceof BeanFactoryAware) {
		|			((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);
		|		}
		|	}
		|}
		invokeInitMethods 主要处理 afterPropertiesSet , invokeCustomInitMethod
		|------------------------------------------------------------------------------------------------------------------------------------------------
		|	/**
		|	 * Give a bean a chance to react now all its properties are set,
		|	 * and a chance to know about its owning bean factory (this object).
		|	 * This means checking whether the bean implements InitializingBean or defines
		|	 * a custom init method, and invoking the necessary callback(s) if it does.
		|	 * @param beanName the bean name in the factory (for debugging purposes)
		|	 * @param bean the new bean instance we may need to initialize
		|	 * @param mbd the merged bean definition that the bean was created with
		|	 * (can also be {@code null}, if given an existing bean instance)
		|	 * @throws Throwable if thrown by init methods or by the invocation process
		|	 * @see #invokeCustomInitMethod
		|	 */
		|	protected void invokeInitMethods(String beanName, final Object bean, RootBeanDefinition mbd)
		|			throws Throwable {
		|
		|		boolean isInitializingBean = (bean instanceof InitializingBean);
		|		if (isInitializingBean && (mbd == null || !mbd.isExternallyManagedInitMethod("afterPropertiesSet"))) {
		|			if (logger.isDebugEnabled()) {
		|				logger.debug("Invoking afterPropertiesSet() on bean with name '" + beanName + "'");
		|			}
		|			if (System.getSecurityManager() != null) {
		|				try {
		|					AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
		|						public Object run() throws Exception {
		|							((InitializingBean) bean).afterPropertiesSet();
		|							return null;
		|						}
		|					}, getAccessControlContext());
		|				}
		|				catch (PrivilegedActionException pae) {
		|					throw pae.getException();
		|				}
		|			}
		|			else {
		|				((InitializingBean) bean).afterPropertiesSet();
		|			}
		|		}
		|
		|		if (mbd != null) {
		|			String initMethodName = mbd.getInitMethodName();
		|			if (initMethodName != null && !(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&
		|					!mbd.isExternallyManagedInitMethod(initMethodName)) {
		|				invokeCustomInitMethod(beanName, bean, mbd);
		|			}
		|		}
		|	}
		|------------------------------------------------------------------------------------------------------------------------------------------------
